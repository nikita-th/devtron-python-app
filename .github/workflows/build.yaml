name: Build Python App image and push to GAR

# Define the trigger for this workflow (runs on push to the develop branch)
on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

      
# Define environment variables      
env:
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }}    # Artifact Registry Location

# Define the jobs to run in this workflow  
jobs:
  build:
  
    # Use a self-hosted runner  
    runs-on: ubuntu-latest
    
    # Define permissions for the job    
    permissions:
      contents: read        
      id-token: write
      checks: write
      
    # Steps to be executed within the job
    steps:
    
    # Step 1: Checkout code from the repository
    - name: 'Checkout code'
      uses: 'actions/checkout@v2'
      
  install:
    runs-on: ubuntu-latest
    needs: build
    environment: uat
    steps:
    - name: 'Checkout code'
      uses: 'actions/checkout@v2'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage
        if  [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Unit Tests and generate coverage report
      run: |
        cd src
        python -m unittest -v
        coverage run -m unittest
        coverage report
        coverage html

    - name: Archive code coverage html report
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report
        path: src/htmlcov

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

    - name: 'Docker username and password' 
      uses: 'docker/login-action@v1'
      with:
        registry: '${{ secrets.REGION }}-docker.pkg.dev' #gcr.io' # or REGION-docker.pkg.dev
        username: 'oauth2accesstoken'
        password: '${{ steps.auth.outputs.access_token }}'

    - name: 'Build and Push Docker Image'
      run: |
        IMAGE="${{ secrets.IMAGE_NAME }}:${GITHUB_SHA:0:7}"
        docker build -t $IMAGE .
        docker push $IMAGE

